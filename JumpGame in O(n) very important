// JumpGame problem
// very important for interview
// this solution solves it in O(n) time and O(n) space
// Question link -> https://leetcode.com/problems/jump-game/description/?envType=study-plan-v2&envId=top-interview-150

// The logic is that we iterate from the right and try to think of a solution such that for each index, we know if that index can lead us to the end and suppose
// the value at that index is 5, then we also store suffix sum such that we get if from i+1 and i+5, we have a way to get to the end;

// the canReach array will have values like 1,1,0,1,0,0,1,1,1 where 1 signifies if we can reach the end from that index. We can use this same array as answer.
// Just for ease of understanding I used a separate array of booleans.
// the suffix array will have the right summation till an index, which basically means for a particular index, if the sum from the right > 0, then it means, there is atleast
// one way from that index to reach the end.
// BUT we already have this information in the canReach array so WHY USE another array suffix ?????
// We use another array suffix to determine if there is a way to the end in between an interval, like i+1 to i+nums[i]
// we find the suffix sum in this interval to determine if there is a way to get to the end.

// Check code for better explanation.





class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        if(n==1){
            return true;
        }
        vector<int> canReach(n,0);
        canReach[n-1]=1;
        vector<int> suffix(n,0);
        suffix[n-1]=1;
        vector<bool> ans(n,false);
        ans[n-1]=true;
        for(int i=n-2;i>=0;i--) {
            if(nums[i]==0){
                ans[i]=false;
                canReach[i]=0;
                suffix[i]=canReach[i]+suffix[i+1];
            }
            else{
                int lowerBound = min(i+1,n-1);
                int upperBound = min(i+nums[i],n-1);
                int noOfWays=suffix[lowerBound];
                if(upperBound+1<n){
                    noOfWays-=suffix[upperBound+1];
                }
                if(noOfWays>0){
                    ans[i]=true;
                    canReach[i]=1;
                }
                else{
                    ans[i]=false;
                    canReach[i]=0;
                }
                suffix[i]=canReach[i]+suffix[i+1];
            }
        }
        return ans[0];
    }
};





// Below is second solution which uses O(1) space and is again very important
// The idea is that if nums[i]==0 and the index we are currently on is the current maxIndex, then there is no way to reach the end.
// If maxIndex exceeds array size, then we have reached the end.
// What we do is we determine what is the maximum maxIndex we can reach by doing i+nums[i] and comparing it with present maxIndex and then we keep iterating till then
// unless we find a new maxIndex. We do this because if for i+nums[i] =j , that means we can reach all other indices before j. So we can keep iterating till we reach j and in
// meantime, we can get another maxIndex on the way. Pretty cool soln it is.


class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxIdx = nums[0];

        for (int i = 0; i < nums.size(); ++i) {
            if (maxIdx >= nums.size() - 1) return true;

            if (nums[i] == 0 and maxIdx == i) return false;

            if (i + nums[i] > maxIdx) maxIdx = i + nums[i];
        }

        return true;
    }
};
