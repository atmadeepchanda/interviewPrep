// the easier solution is sort and return nums[n/2] which does in O(log n)
// The below is important and implements Boyer-Moore algo in O(n) time
//  The solution works provided there always exists a majority element.
//  a majority element is an integer which occurs more than floor(count(array)/2) times

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int majorityElement = 0;
        int count = 0;
        for(int i=0;i<nums.size();i++){
            if(count==0){
                majorityElement = nums[i];
            }
            if(nums[i]==majorityElement){
                count++;
            }
            else{
                count--;
            }
        }
        return majorityElement;
    }
};
